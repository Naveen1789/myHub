package trees.SwapNodesAlgo;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Tree {
	
	int data;
	Tree leftSubTree;
	Tree rightSubTree;
	
}



public class Solution {
	
	String traverseInInorder(Tree n, String str){
	    if(n == null){
	        return str;
	    }
	    else{
	        
	        str = traverseInInorder(n.leftSubTree,str);
	        str = str + " " + n.data;
	        str = traverseInInorder(n.rightSubTree,str);
	        return str;
	    }
	}
	
	public static Tree makeTree(){
		Scanner in = new Scanner(System.in);
		
		int numOfNodes = Integer.parseInt(in.nextLine());
		
		Queue<Tree> q = new LinkedList<Tree>();
		
		Tree head = new Tree();
		head.data = 1;
		head.leftSubTree = null;
		head.rightSubTree = null;
		
		q.add(head);
		
		String[] tempArr = new String[2];
		Tree tempTree = null;
		
		for(int i = 0; i < numOfNodes; i++){
			
			tempTree = q.remove();
			
			tempArr = in.nextLine().split(" ");
			
			// Make left sub tree
			Tree lst = new Tree();
			if(tempArr[0].equals("-1")){
				lst = null;
			}
			else{
				lst.data = Integer.parseInt(tempArr[0]);
				lst.leftSubTree = null;
				lst.rightSubTree = null;
			}
		
			// Make right sub tree
			Tree rst = new Tree();
			if(tempArr[1].equals("-1")){
				rst = null;
			}
			else{
				rst.data = Integer.parseInt(tempArr[1]);
				rst.leftSubTree = null;
				rst.rightSubTree = null;
			}
			
			tempTree.leftSubTree = lst;
			tempTree.rightSubTree = rst;

			if(lst != null){
				q.add(lst);
			}
			if(rst != null){
				q.add(rst);
			}
			
		}
		
		return head;
	}
	
	public static int height(Tree root){
	    if(root == null){
	        return 0;
	    }
	    else{
	        return 1 + Math.max(height(root.leftSubTree),height(root.rightSubTree));
	    }
	         
	 }

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
	}

}
