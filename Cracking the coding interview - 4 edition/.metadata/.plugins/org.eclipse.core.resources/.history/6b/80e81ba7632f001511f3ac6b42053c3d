package otherSimpleAlgorithms;

import java.util.HashSet;


public class LinkedLists {
	
	public static void main(String args[]){
		

		
		LinkedList l1 = new LinkedList();
		l1.addNode("a");
		l1.addNode("b");
		l1.addNode("c");
		l1.addNode("d");
		l1.addNode("d");
		l1.addNode("d");
		l1.addNode("d");
		l1.addNode("s");
		System.out.println("#######");		
		l1.display();
		l1.deleteAllNodes("d");
		l1.display();

//		l1.addNode("b");
//		l1.addNode("a");
//		l1.addNode("d");
//		System.out.println("#######");
//		l1.display();
//		l1.removeDuplicatessingHashSet();
//		System.out.println("#######");
//		l1.display();
//		System.out.println("#######");
		
		// l1.display(3);
	}

}

//==================================================================================== //

class LinkedList {
	
	Node head ;
	int size ;
	
	LinkedList () {
		this.head = null ;
		this.size = 0 ;
	}

	public Node getHead() {
		return head;
	}

//	public void setHead(Node head) {
//
//	}

	
	public int getSize() {
		return size;
	}

//	public void setSize(int size) {
// 
//	}

	public void addNode ( String str ) {
		
		Node n = new Node(str);
		// If the LL is empty, this will be the first node
		if(this.size == 0){
			this.head = n ;
			this.size = 1;
		}
		// Add this node to the end of the LL
		else{
			int curPtr = 0;
			Node curNode = head;
			while(curPtr<(this.size-1)){
				curNode = curNode.nextNode;
				curPtr++;
			}
			curNode.nextNode = n;
			this.size++;
		}

	}
	
	public void addNode (int index, String str) {
		
		/*
		 * 
		 * index cannot be larger than size of the array list
		LinkedList<Integer> l = new LinkedList<Integer>();
		
		l.add(17);
		l.add(22);
		
		l.add(1,49);
		// l.add(5,49);
		
		Iterator it = l.iterator();
		while(it.hasNext()){
			System.out.println(it.next());
		}
		 */
		
		if(index >= this.size){
			System.out.println("Index is out of range.");
			return;
		}
		
		Node curNode = this.head;
		
		int curPtr = 0;
		
		while(curPtr < (index-1)){
			curNode = curNode.nextNode;
			curPtr++;
		}
		
		Node tempNode = curNode.nextNode;
		
		Node n = new Node(str);
		curNode.nextNode = n;
		
		n.nextNode = tempNode;
		this.size++;

	}
	
	public void addFirst ( String str ) {
		
		Node n = new Node(str);
		n.nextNode = this.head;
		
		this.head = n;
		this.size++;

	}
	
	public void addLast ( String str ) {
		
		this.addNode(str);

	}
	
	public void deleteFirst(){
		if(this.size <= 0){
			System.out.println("Linked List is empty.");
			return;
		}
		this.head = head.nextNode;
		this.size--;
	}
	
	public void deleteLast(){
		
		if(this.size <= 0){
			System.out.println("Linked List is empty.");
			return;
		}
		
		int curPtr = 0;
		Node curNode = head;
		while(curPtr<(this.size-2)){
			curNode = curNode.nextNode;
			curPtr++;
		}
		curNode.nextNode = null;
		this.size--;
		
	}
	
	public void deleteNode(int index){
		
		if(index < 0 || index >= this.size){
			System.out.println("Index out of range.");
			return;
		}
		
		if(index == 0){
			this.deleteFirst();
			return;
		}
		int curPtr = 0;
		Node curNode = head;
		while(curPtr<(index-1)){
			curNode = curNode.nextNode;
			curPtr++;
		}
		
//		Node temp = curNode.nextNode;
		curNode.nextNode = (curNode.nextNode).nextNode;
//		temp.nextNode = null;
		this.size = this.size - 1;
		
	}
	
	public void deleteNode(String str){
		
		int curPtr = 0;
		Node curNode = head;
		
		while(curPtr <= (this.size - 1)){
			if(curNode.getInfo().equals(str)){
				this.deleteNode(curPtr);
				return;
			}
			curNode = curNode.nextNode;
			curPtr++;
		}
	}
	
	public void deleteAllNodes(String str){
		
		int curPtr = 0;
		Node curNode = head;
		
		while(curPtr <= (this.size - 1)){
			System.out.println("curPtr = " + curPtr);
			System.out.println("curNode.getInfo() = " + curNode.getInfo());
			System.out.println("this.size = " + this.size);
			if(curNode.getInfo().equals(str)){
				System.out.println("Match found");
				this.deleteNode(curPtr);
			}
			else{
				curPtr++;
			}
			curNode = curNode.nextNode;
		}
	}
	
	public void display () {
		
		Node curNode = this.head;
		
		int i = 1;
		while(i <= this.size ){
			System.out.print(curNode.getInfo() + "\t");
			i++;
			curNode = curNode.nextNode;
		}
		System.out.println();
	}
	
	public void display (int start, int last) {
			
		if(start < 0 || last < 0 || start > (this.size - 1) || last > (this.size - 1)){
			System.out.println("Index out of range.");
			return;
		}
		
		Node curNode = this.head;
		
		int i = 0;
		while(i < start ){
			curNode = curNode.nextNode;
			i++;
		}
			
		while(i <= last ){
			System.out.print(curNode.getInfo() + "\t");
			i++;
			curNode = curNode.nextNode;
		}
		System.out.println();
	}
	
	public void display (int start) {
		
		if(start < 0 || start > (this.size - 1)){
			System.out.println("Index out of range.");
			return;
		}
		
		Node curNode = this.head;
		
		int i = 0;
		while(i < start ){
			curNode = curNode.nextNode;
			i++;
		}
			
		while(i < this.size ){
			System.out.println(curNode.getInfo() + "\t");
			i++;
			curNode = curNode.nextNode;
		}
		System.out.println();
	}
	
	public void removeDuplicatessingHashSet(){
		if(this.size <= 0){
			System.out.println("LinkedList isempty.");
			return;
		}
		
		HashSet<String> hSet = new HashSet<String>();
		
		Node curNode = this.head;		
		int curPtr = 0;
		while(curPtr < this.size){
			System.out.println("curPtr = " + curPtr);
			System.out.println("curNode.info = " + curNode.info);
			System.out.println("this.size = " + this.size);
			if(hSet.contains(curNode.info)){
				this.deleteNode(curPtr);
				
			}
			else{
				hSet.add(curNode.info);
			}
			curNode = curNode.nextNode;
			curPtr++;
			
		}
		
	}

}

//==================================================================================== //

class Node {
	
	String info ;
	Node nextNode ;
	// int index;
	// Index in the LL
	
//	Node ( String info , Node next ) {
//		this.info = info ;
//		this.nextNode = next ;
//	}
	
	Node ( String info ) {
		this.info = info ;
		this.nextNode = null ;
	}
	
//	Node () {
//		this.info = "" ;
//		this.nextNode = null ;
//	}
	
	public String getInfo() {
		return info;
	}
	public void setInfo(String info) {
		this.info = info;
	}
	public Node getNextNode() {
		return nextNode;
	}
	public void setNextNode(Node nextNode) {
		this.nextNode = nextNode;
	}
	
}