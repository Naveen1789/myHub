package otherSimpleAlgorithms;

public class LinkedLists {
	
	public static void main(String args[]){
		LinkedList l1 = new LinkedList();
		l1.addNode("a");
		l1.addNode("b");
		l1.addNode("c");
		l1.addNode("d");
		l1.addNode("e");
		l1.addNode("f");
		l1.addNode("g");
		l1.addNode("h");
		// l1.display();
		l1.display(1,7);
	}

}

//==================================================================================== //

class LinkedList {
	
	Node head ;
	int size ;
	
	LinkedList () {
		this.head = null ;
		this.size = 0 ;
	}

	public Node getHead() {
		return head;
	}

//	public void setHead(Node head) {
//
//	}

	
	public int getSize() {
		return size;
	}

//	public void setSize(int size) {
// 
//	}

	public void addNode ( String str ) {
		
		Node n = new Node(str);
		// If the LL is empty, this will be the first node
		if(this.size == 0){
			this.head = n ;
			this.size = 1;
		}
		// Add this node to the end of the LL
		else{
			int curPtr = 0;
			Node curNode = head;
			while(curPtr<(this.size-1)){
				curNode = curNode.nextNode;
				curPtr++;
			}
			curNode.nextNode = n;
			this.size++;
		}

	}
	
	public void addNode ( String str,int index) {
		
		Node n = new Node(str);
		
		Node curNode = this.head;
		
//		int curPtr = 0;
//		while(curPtr < index){
//			
//		}
//		// If the LL is empty, this will be the first node
//		if(this.size == 0){
//			this.head = n ;
//			this.size = 1;
//		}
//		// Add this node to the end of the LL
//		else{
//			int i = 1;
//			Node curNode = head;
//			while(i<index){
//				curNode = curNode.nextNode;
//				i++;
//			}
//			curNode.nextNode = n;
//			this.size++;
//		}

	}
	
	public void display () {
		
		Node curNode = this.head;
		
		int i = 1;
		while(i <= this.size ){
			System.out.println(curNode.getInfo());
			i++;
			curNode = curNode.nextNode;
		}
	}
	
	public void display (int start, int last) {
			
		if(start < 0 || last < 0 || start > (this.size - 1) || last > (this.size - 1)){
			System.out.println("Index out of range.");
			return;
		}
		
		Node curNode = this.head;
		
		int i = 0;
		while(i < start ){
			curNode = curNode.nextNode;
			i++;
		}
			
		while(i <= last ){
			System.out.println(curNode.getInfo());
			i++;
			curNode = curNode.nextNode;
		}
	}
	
	public void display (int start) {
		
		if(start < 0 || start > (this.size - 1)){
			System.out.println("Index out of range.");
			return;
		}
		
		Node curNode = this.head;
		
		int i = 0;
		while(i < start ){
			curNode = curNode.nextNode;
			i++;
		}
			
		while(i <= this.size ){
			System.out.println(curNode.getInfo());
			i++;
			curNode = curNode.nextNode;
		}
	}
			
}

//==================================================================================== //

class Node {
	
	String info ;
	Node nextNode ;
	// int index;
	// Index in the LL
	
	Node ( String info , Node next ) {
		this.info = info ;
		this.nextNode = next ;
	}
	
	Node ( String info ) {
		this.info = info ;
		this.nextNode = null ;
	}
	
	Node () {
		this.info = "" ;
		this.nextNode = null ;
	}
	
	public String getInfo() {
		return info;
	}
	public void setInfo(String info) {
		this.info = info;
	}
	public Node getNextNode() {
		return nextNode;
	}
	public void setNextNode(Node nextNode) {
		this.nextNode = nextNode;
	}
	
}